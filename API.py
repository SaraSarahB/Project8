{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4c9ecc95",
   "metadata": {},
   "outputs": [],
   "source": [
    "from PIL import Image\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import tensorflow as tf\n",
    "import os\n",
    "import matplotlib as plt\n",
    "import matplotlib.pyplot as plt\n",
    "import shutil\n",
    "import cv2\n",
    "import glob\n",
    "import imgaug.augmenters as iaa\n",
    "from keras.utils import Sequence\n",
    "from keras.models import save_model\n",
    "from keras.models import load_model\n",
    "#import segmentation_models as sm\n",
    "from keras.utils import to_categorical, img_to_array\n",
    "from flask import Flask, request, jsonify, send_file\n",
    "from tensorflow.keras.models import load_model\n",
    "from tensorflow import keras\n",
    "\n",
    "os.environ[\"SM_FRAMEWORK\"] = \"tf.keras\"\n",
    "from segmentation_models import Unet\n",
    "import segmentation_models as sm\n",
    "\n",
    "import efficientnet.tfkeras as efn\n",
    "from segmentation_models.metrics import IOUScore, FScore\n",
    "\n",
    "# Importez les autres modules requis\n",
    "#définir les paramètres : input_shape (définir 3 valeurs l,l, chanel)\n",
    "input_img  = [256,256, 3]\n",
    "nb_classes =  8\n",
    "dice_loss  = sm.losses.DiceLoss()\n",
    "mean_iou   = sm.metrics.IOUScore()\n",
    "mean_dice  = sm.metrics.FScore(beta=1)\n",
    "metrics    = [mean_iou, mean_dice, 'accuracy']\n",
    "\n",
    "app = Flask(__name__)\n",
    "app.config['UPLOAD_FOLDER'] = 'uploads'\n",
    "\n",
    "\n",
    "# Votre fonction de normalisation\n",
    "def normalize_input_img(img):\n",
    "    '''Normalize PIL image to fall in [-1,1] range, returns 3D numpy array'''\n",
    "    img =tf.keras.preprocessing.image.img_to_array(img,dtype=np.int32)\n",
    "    img = img/127.5\n",
    "    img -= 1\n",
    "    return img\n",
    "\n",
    "import segmentation_models as sm\n",
    "sm.set_framework('tf.keras')\n",
    "sm.framework()\n",
    "# ... (Votre code existant) ...\n",
    "\n",
    "import efficientnet.tfkeras as efn\n",
    "from segmentation_models.metrics import IOUScore, FScore\n",
    "\n",
    "# Définir les métriques personnalisées\n",
    "metrics = {\n",
    "    'iou_score': IOUScore(class_weights=1),\n",
    "    'f1-score': FScore(beta=1, class_weights=1)\n",
    "}\n",
    "\n",
    "chemin_modele = r\"C:/Users/Sara/Desktop/FormationIA/Projet8/api/Test/model_Unet_Aug.h5\"\n",
    "modele_charge_unet = load_model(chemin_modele, custom_objects=metrics)\n",
    "\n",
    "# Définissez la route pour afficher la page HTML\n",
    "@app.route('/')\n",
    "def index():\n",
    "    return render_template('index.html', original_image='', predicted_mask='', real_mask='')\n",
    "\n",
    "# Définissez la route pour télécharger le modèle\n",
    "@app.route('/download_model_unet', methods=['GET'])\n",
    "def download_model_unet():\n",
    "    return send_file(chemin_modele, as_attachment=True)\n",
    "\n",
    "#img_path = 'C:/Users/Sara/Desktop/FormationIA/Projet8/images/train/dusseldorf_000045_000019_leftImg8bit.png'\n",
    "#mask_path = 'C:/Users/Sara/Desktop/FormationIA/Projet8/'\n",
    "\n",
    "# Définissez la route pour prédire le masque\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)\n",
    "\n",
    "    # Définissez la route pour prédire le masque\n",
    "@app.route('/predict_mask', methods=['POST'])\n",
    "def predict_mask():\n",
    "    if 'image' not in request.files:\n",
    "        return \"Aucun fichier image trouvé\"\n",
    "    \n",
    "    # Obtenez le fichier image téléchargé\n",
    "    image_file = request.files['image']\n",
    "    \n",
    "    if image_file.filename == '':\n",
    "        return \"Nom de fichier vide\"\n",
    "    \n",
    "    # Sauvegardez temporairement le fichier image téléchargé\n",
    "    image_path = os.path.join(app.config['UPLOAD_FOLDER'], 'uploaded_image.png')\n",
    "    image_file.save(image_path)\n",
    "    \n",
    "    # Chemin du masque réel\n",
    "    real_mask_path = os.path.join(os.path.dirname(__file__), 'uploads', 'mask_' + os.path.basename(image_path))\n",
    "    \n",
    "    # Chargez le masque réel\n",
    "    real_mask = Image.open(real_mask_path)\n",
    "    \n",
    "    # Prédire le masque en utilisant votre fonction predict_mask\n",
    "    predicted_mask = predict_mask(image_path)\n",
    "    \n",
    "    return render_template('index.html', original_image=image_path, predicted_mask=predicted_mask, real_mask=real_mask_path)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
